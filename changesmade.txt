inside create user route.js
import { NextResponse } from "next/server";
import { inngest } from "@/inngest/client";

export async function POST(req) {
  try {
    const { user } = await req.json();

    // Fire-and-forget Inngest event
    inngest.send({
      name: "user.create",
      data: { user }
    });

    return NextResponse.json({ success: true, message: "User creation event sent" });
  } catch (error) {
    return NextResponse.json({ error: "Failed to send event", details: error.message }, { status: 500 });
  }
}
2.inside api generate-course-outline: route.js:
import { courseOutline } from "@/configs/AiModel";
import { STUDY_MATERIAL_TABLE } from "@/configs/schema";
import { NextResponse } from "next/server";
import { db } from "@/configs/db";

export async function POST(req) {
    try {
        console.log("üì¢ Incoming request to generate course outline...");

        // Parse request
        const { courseId, topic, courseType, difficultyLevel, createdBy } = await req.json();
        console.log("‚úÖ Received Data:", { courseId, topic, courseType, difficultyLevel, createdBy });

        // Check if required fields are missing
        if (!courseId || !topic || !courseType || !difficultyLevel || !createdBy) {
            console.error("‚ùå Missing required fields!");
            return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
        }

        // Generate AI Prompt
        const PROMPT = `Generate study material for ${topic} (${courseType}, ${difficultyLevel}). Output in JSON format.`;
        console.log("üîπ Generated AI Prompt:", PROMPT);

        // Fetch AI response
        const aiResp = await courseOutline.sendMessage(PROMPT);
        console.log("üß† AI Response:", aiResp);

        // Parse AI response
        let aiResult;
        try {
            aiResult = JSON.parse(aiResp.content);
        } catch (error) {
            console.error("‚ùå Error parsing AI response:", error.message);
            return NextResponse.json({ error: "Invalid AI response format" }, { status: 500 });
        }

        console.log("‚úÖ Parsed AI Response:", aiResult);

        // Insert into database
        console.log("üõ¢Ô∏è Inserting data into the database...");
        const dbResult = await db.insert(STUDY_MATERIAL_TABLE).values({
            courseId,
            courseType,
            createdBy,
            topic,
            courseLayout: JSON.stringify(aiResult)
        }).returning("*");

        console.log("‚úÖ Database Insert Result:", dbResult);

        return NextResponse.json({ result: dbResult[0] });
    } catch (error) {
        console.error("‚ùå Server Error:", error.message);
        return NextResponse.json({ error: "Internal Server Error", details: error.message }, { status: 500 });
    }
}
3.inside api inngest route.js:
import { serve } from "inngest/next";
import { inngest } from "../../../inngest/client";
import { CreateNewUser, helloWorld } from "@/inngest/functions";

// Create an API that serves zero functions
export const { GET, POST, PUT } = serve({
  client: inngest,
  functions: [
    /* your functions will be passed here later! */
    helloWorld,
    CreateNewUser
  ],
});
4.inside create components selectOption. :
import Image from 'next/image'
import React, { useState } from 'react'

function SelectOption({selectedStudyType}) {
    const Options = [
        { name: 'Exam', icon: '/exam_1.png' },
        { name: 'Job Interview', icon: '/job.png' },
        { name: 'Practice', icon: '/practice.png' },
        { name: 'Coding Prep', icon: '/code.png' },
        { name: 'Other', icon: '/knowledge.png' },
    ];
    const [selectedOption,setSelectedOption]=useState();

    return (
        <div className=''>
            <h2 className='text-center mb-2 text-lg'>For which you want to create your personal study material?</h2>
            <div className='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-5 mt-5'>
                {Options.map((option, index) => (
                    <div key={index} className={`p-4 flex flex-col items-center justify-center 
                    border rounded-xl gap-3 hover:border-primary
                    ${option?.name==selectedOption&&'border-primary'}`}
                    onClick={() => {setSelectedOption(option.name);selectedStudyType(option.name)}}>
                    
                        <Image src={option.icon} alt={option.name} width={20} height={50} />
                        <h2 className='text-sm'>{option.name}</h2>
                    </div>
                ))}
            </div>
        </div>
    );
}

export default SelectOption;
5. inside app create page.jsx: 
"use client";
import React, { useState } from "react";
import SelectOption from "./_components/SelectOption";
import { Button } from "@/components/ui/button";
import TopicInput from "./_components/TopicInput";
import axios from "axios";
import { useUser } from "@clerk/nextjs";
import { v4 as uuidv4 } from "uuid";

function Create() {
    const [step, setStep] = useState(0);
    const [formData, setFormData] = useState({});
    const { user } = useUser();

    const handleUserInput = (fieldName, fieldValue) => {
        setFormData((prev) => ({
            ...prev,
            [fieldName]: fieldValue,
        }));
        console.log(formData);
    };

    // Used to save user input and generate course layout using AI
    const GenerateCourseOutline = async () => {
        const courseId = uuidv4();
        const result = await axios.post("/api/generate-course-outline", {
            courseId,
            ...formData,
            createdBy: user?.primaryEmailAddress?.emailAddress,
        });
        console.log(result);
    };

    return (
        <div className="flex flex-col items-center p-5 md:px-24 lg:px-36 mt-20">
            <h2 className="font-bold text-4xl text-primary">
                Start Building Your Personal Material
            </h2>
            <p className="text-gray-500 text-lg">
                Fill all the details in order to generate study material for your next project
            </p>
            <div className="mt-10">
                {step === 0 ? (
                    <SelectOption selectedStudyType={(value) => handleUserInput("studyType", value)} />
                ) : (
                    <TopicInput
                        SetTopic={(value) => handleUserInput("topic", value)}
                        setDifficultyLevel={(value) => handleUserInput("difficultyLevel", value)}
                    />
                )}
            </div>
            <div className="flex justify-between w-full mt-32">
                {step !== 0 ? <Button variant="outline" onClick={() => setStep(step - 1)}>Previous</Button> : '.'}
                {step === 0 ? (
                    <Button onClick={() => setStep(step + 1)}>Next</Button>
                ) : (
                    <Button onClick={GenerateCourseOutline}>Generate</Button>
                )}
            </div>
        </div>
    );
}

export default Create;
6.app\dashboard\_components\DashboardHeader.jsx:
import { UserButton } from '@clerk/nextjs'
import React from 'react'

function DashboardHeader() {
  return (
    <div className='p-5 shadow-md flex justify-end'>
        <UserButton/>
    </div>
  )
}

export default DashboardHeader
7. app\dashboard\_components\sidebar.jsx:
"use client";
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { LayoutDashboard, Shield, UserCircle } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import React from 'react';

function SideBar() { 
    const MenuList = [
        {
            name: 'Dashboard',
            icon: LayoutDashboard,
            path: '/dashboard'
        },
        {
            name: 'Upgrade',
            icon: Shield,
            path: '/dashboard/upgrade'
        },
        {
            name: 'Profile',
            icon: UserCircle,
            path: '/dashboard/profile'
        }
    ];
    
    const path = usePathname();

    return (
        <div className="h-screen w-64 shadow-md p-5">
            <div className='flex gap-2 items-center'>
                <Image src={'/logo.svg'} alt='logo' width={40} height={40} />
                <h2 className="font-bold text-2xl">Easy Study</h2>
            </div>
            <div className='mt-10'> 
            <Link href={'/create'} className="w-full">
                <Button className="w-full"> Create New</Button>
            </Link>

                <div className='mt-5'> 
                    {MenuList.map((menu, index) => (
                        <div key={index} 
                            className={`flex items-center gap-3 p-2 hover:bg-slate-200 rounded-lg cursor-pointer mt-3 
                            ${path === menu.path ? 'bg-slate-200' : ''}`}>
                            <menu.icon className="w-5 h-5" />
                            <h2 className="text-base">{menu.name}</h2>
                        </div>
                    ))}
                </div>
            </div>
            <div className='border p-3 bg-slate-100 rounded-lg
            absolute bottom-10 w-[85%]'>
                <h2 className='text-lg mb-2'>Available Credits: 5</h2>
                <Progress value={30} />
                <h2 className='text-sm'>1 out of 5 credits used</h2>
                <Link href={'/dashboard/upgrade'} className='text-primary text-xs mt-3 block'>Upgrade to Create More</Link>
            </div>
        </div>
    );
}

export default SideBar;
7.ai-study-material-gen\app\dashboard\layout.jsx
    import { Sidebar } from 'lucide-react';
    import React from 'react'
    import DashboardHeader from './_components/DashboardHeader';
import SideBar from './_components/sidebar';

    function DashboardLayout({ children }) {
    return (
        <div>
            <div className='md:w-64 hidden  md:block fixed'>
                <SideBar/>
            </div>
            <div className='md:ml-64'>
                <DashboardHeader/>
            <div className='p-10'>
                {children}
            </div>
            </div>
        </div>
    )
    }

    export default DashboardLayout;
8.C:\final\Ai-\ai-study-material-gen\app\globals.css:
@tailwind base;
@tailwind components;
@tailwind utilities;



@layer base {
  :root {

    --background: 0 0% 100%;

    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;

    --card-foreground: 0 0% 3.9%;

    --popover: 0 0% 100%;

    --popover-foreground: 0 0% 3.9%;

    --primary: 0 0% 9%;

    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 96.1%;

    --secondary-foreground: 0 0% 9%;

    --muted: 0 0% 96.1%;

    --muted-foreground: 0 0% 45.1%;

    --accent: 0 0% 96.1%;

    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;

    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;

    --input: 0 0% 89.8%;

    --ring: 0 0% 3.9%;

    --chart-1: 12 76% 61%;

    --chart-2: 173 58% 39%;

    --chart-3: 197 37% 24%;

    --chart-4: 43 74% 66%;

    --chart-5: 27 87% 67%;

    --radius: 0.5rem
  }
  .dark {

    --background: 0 0% 3.9%;

    --foreground: 0 0% 98%;

    --card: 0 0% 3.9%;

    --card-foreground: 0 0% 98%;

    --popover: 0 0% 3.9%;

    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;

    --primary-foreground: 0 0% 9%;

    --secondary: 0 0% 14.9%;

    --secondary-foreground: 0 0% 98%;

    --muted: 0 0% 14.9%;

    --muted-foreground: 0 0% 63.9%;

    --accent: 0 0% 14.9%;

    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;

    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 14.9%;

    --input: 0 0% 14.9%;

    --ring: 0 0% 83.1%;

    --chart-1: 220 70% 50%;

    --chart-2: 160 60% 45%;

    --chart-3: 30 80% 55%;

    --chart-4: 280 65% 60%;

    --chart-5: 340 75% 55%
  }
}



@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
9.C:\final\Ai-\ai-study-material-gen\app\layout.js:
import { Outfit } from "next/font/google";
import "./globals.css";
import localfont from "next/font/local";
import { ClerkProvider } from "@clerk/nextjs";
import Provider from "./provider";

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const outfit=Outfit({subsets:['latin']});
export default function RootLayout({ children }) {
  return (
    <ClerkProvider><html lang="en">
      <body
        className={outfit.className}
      >
        <Provider>
          {children}
        </Provider>
        
      </body>
    </html>

    </ClerkProvider> 
  );
}
10. app page.js:
import { Button } from "@/components/ui/button";
import { UserButton } from "@clerk/nextjs";
import Image from "next/image";

export default function Home() {
  return (
   <div>
    <h2> dont quit</h2>
    <Button variant="ghost">calmly proceede</Button>
    <UserButton> </UserButton>

   </div>
  );
}

11.app provider.js:
"use client"
import { db } from '@/configs/db';
import { USER_TABLE } from '@/configs/schema';
import { useUser } from '@clerk/nextjs';
import axios from 'axios';
import { eq } from 'drizzle-orm'; 
import React, { useEffect } from 'react';

function Provider({ children }) {
  const { user } = useUser();

  useEffect(() => {
    if (user) CheckIsNewUser();
  }, [user]);

  const CheckIsNewUser = async () => {
    try {
      const resp = await axios.post("/api/create-user", { user });
      console.log(resp.data);
    } catch (error) {
      console.error("Error creating user:", error);
    }
  };
  return (
    <div>{children}
    </div>
  )
}

export default Provider;
12. C:\final\Ai-\ai-study-material-gen\configs\AiModel.js:
const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
 
    export const courseOutline = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material forPython for Exam and level of difficulty will be EASY with summery of course, List of Chapters along with summery for each chapter, Topic list in each chapter, ALL result  in JSON format\n\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"course_title\": \"Python Fundamentals for Beginners (Easy Level)\",\n  \"course_summary\": \"This course provides a gentle introduction to the Python programming language, focusing on fundamental concepts like data types, variables, operators, control flow, and basic functions. It's designed for individuals with little to no prior programming experience and aims to equip learners with the essential skills to write simple Python programs and understand basic programming logic.\",\n  \"difficulty_level\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Introduction to Python\",\n      \"chapter_summary\": \"This chapter introduces what Python is, its history, its uses, and how to set up your development environment. It covers the basics of interacting with the Python interpreter.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why Learn Python?\",\n        \"Applications of Python\",\n        \"Installing Python (Windows, macOS, Linux)\",\n        \"Python Interpreters (IDLE, Terminal)\",\n        \"Running Your First Python Program ('Hello, World!')\",\n        \"Basic Syntax and Conventions\",\n        \"Comments in Python\"\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Variables and Data Types\",\n      \"chapter_summary\": \"This chapter covers the fundamental data types in Python and how to store data using variables. You'll learn about integers, floats, strings, booleans, and basic operators.\",\n      \"topics\": [\n        \"What are Variables?\",\n        \"Naming Variables (Rules and Best Practices)\",\n        \"Assigning Values to Variables\",\n        \"Data Types: Integers (int)\",\n        \"Data Types: Floating-Point Numbers (float)\",\n        \"Data Types: Strings (str)\",\n        \"Data Types: Booleans (bool)\",\n        \"Basic Arithmetic Operators (+, -, *, /, %)\",\n        \"Type Conversion (Casting): int(), float(), str(), bool()\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Input and Output\",\n      \"chapter_summary\": \"This chapter focuses on how to interact with the user by taking input and displaying output using the `input()` and `print()` functions. It also introduces string formatting.\",\n      \"topics\": [\n        \"The `print()` Function\",\n        \"Displaying Text and Variables\",\n        \"Using `sep` and `end` Parameters in `print()`\",\n        \"The `input()` Function\",\n        \"Taking User Input\",\n        \"Converting Input to Different Data Types\",\n        \"String Formatting: Using f-strings (formatted string literals)\"\n      ]\n    },\n    {\n      \"chapter_number\": 4,\n      \"chapter_title\": \"Control Flow: Conditional Statements\",\n      \"chapter_summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) that allow your program to make decisions based on conditions.\",\n      \"topics\": [\n        \"What are Conditional Statements?\",\n        \"The `if` Statement\",\n        \"The `else` Statement\",\n        \"The `elif` Statement (else if)\",\n        \"Nested `if` Statements\",\n        \"Comparison Operators (==, !=, >, <, >=, <=)\",\n        \"Logical Operators (and, or, not)\"\n      ]\n    },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Control Flow: Loops\",\n      \"chapter_summary\": \"This chapter introduces looping constructs (`for` and `while` loops) that allow you to repeat blocks of code.\",\n      \"topics\": [\n        \"What are Loops?\",\n        \"The `for` Loop\",\n        \"Iterating through Strings\",\n        \"Iterating through a range of numbers using `range()`\",\n        \"The `while` Loop\",\n        \"Loop Control Statements: `break`\",\n        \"Loop Control Statements: `continue`\",\n        \"Using `else` with Loops (optional, for specific scenarios)\"\n      ]\n    },\n    {\n      \"chapter_number\": 6,\n      \"chapter_title\": \"Basic Data Structures: Lists\",\n      \"chapter_summary\": \"This chapter introduces Lists as a fundamental data structure for storing ordered collections of items.  Basic operations such as access, add, change and remove are covered.\",\n      \"topics\":[\n          \"What is a List?\",\n          \"Creating a List\",\n          \"Accessing Elements in a List (Indexing)\",\n          \"List Slicing\",\n          \"List Length (len())\",\n          \"Adding Elements to a List (append(), insert())\",\n          \"Removing Elements from a List (remove(), pop())\",\n          \"Modifying Elements in a List\",\n          \"Iterating through a List using Loops\"\n      ]\n    },\n    {\n      \"chapter_number\": 7,\n      \"chapter_title\": \"Introduction to Functions\",\n      \"chapter_summary\": \"This chapter introduces the concept of functions to modularize code and promote reusability.  Definition, calling and passing parameters is covered.\",\n      \"topics\": [\n        \"What are Functions?\",\n        \"Why Use Functions?\",\n        \"Defining a Function using `def`\",\n        \"Calling a Function\",\n        \"Function Parameters (Arguments)\",\n        \"Returning Values from a Function using `return`\",\n        \"Scope of Variables (Local vs. Global)\",\n        \"Docstrings (Documenting Functions)\"\n      ]\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
13. 13. configs SchemaType.js:
import { json, boolean, integer, pgTable, serial, varchar } from "drizzle-orm/pg-core";

export const USER_TABLE = pgTable('users', {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    email: varchar('email').notNull(),
    isMember: boolean('is_member').default(false)
});

export const STUDY_MATERIAL_TABLE = pgTable('studyMaterial', {
    id: serial('id').primaryKey(),
    courseId: varchar('courseId').notNull(),
    courseType: varchar('courseType').notNull(),
    topic: varchar('topic').notNull(),
    difficultyLevel: varchar('difficultyLevel').default('Easy'),
    courseLayout: json('courseLayout'),
    createdBy: varchar('createdBy').notNull(),
    status:varchar().$default('Generating')
});
14.inngest functions.js:
import { inngest } from "./client";
import { db } from "@/configs/db";
import { USER_TABLE } from "@/configs/schema";
import { eq } from "drizzle-orm";

export const helloWorld = inngest.createFunction(
  { id: "hello-world" },
  { event: "test/hello.world" },
  async ({ event, step }) => {
    await step.sleep("wait-a-moment", "1s");
    return { message: `Hello ${event.data.email}!` };
  }
);

export const CreateNewUser = inngest.createFunction(
  { id: "create-user" },
  { event: "user.create" },
  async ({ event, step }) => {
    const { user } = event.data;
// GET USER DATA 
    await step.run("Check User and Create new if not in db", async () => {
      const result = await db.select().from(USER_TABLE)
        .where(eq(USER_TABLE.email, user?.primaryEmailAddress?.emailAddress));

      if (!result.length) {
        const userResp = await db.insert(USER_TABLE).values({
          name: user?.fullName,
          email: user?.primaryEmailAddress?.emailAddress
        }).returning({ id: USER_TABLE.id })
        return userResp;
        console.log(userResp);
      }
      return result;
    })

    await step.sendEvent("send-welcome-email", {
      name: "user.welcome",
      data: { email: user?.primaryEmailAddress?.emailAddress }
    });

    await step.sleep("wait-3-days", "3d");

    await step.sendEvent("send-followup-email", {
      name: "user.followup",
      data: { email: user?.primaryEmailAddress?.emailAddress }
    });

    return "Success";
  }
);
15. package.jsoon: 
{
  "name": "ai-study-material-gen",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.12.0",
    "@google/generative-ai": "^0.22.0",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "axios": "^1.8.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.39.3",
    "inngest": "^3.31.11",
    "lucide-react": "^0.475.0",
    "next": "15.1.7",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "drizzle-kit": "^0.30.5",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}
